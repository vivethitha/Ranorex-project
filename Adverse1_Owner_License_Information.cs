///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Adverse1_Owner_License_Information recording.
    /// </summary>
    [TestModule("c179ed09-8eab-4171-83cb-1bf708171bd5", ModuleType.Recording, 1)]
    public partial class Adverse1_Owner_License_Information : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static Adverse1_Owner_License_Information instance = new Adverse1_Owner_License_Information();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Adverse1_Owner_License_Information()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Adverse1_Owner_License_Information Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LicenseInformation1' at 68;15.", repo.ApplicationUnderTest.LicenseInformation1Info, new RecordItemIndex(0));
            repo.ApplicationUnderTest.LicenseInformation1.Click("68;15");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'O_Employment Place' with focus on 'ApplicationUnderTest.AO_LI_EmploymentPlace'.", repo.ApplicationUnderTest.AO_LI_EmploymentPlaceInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.AO_LI_EmploymentPlace.PressKeys("O_Employment Place");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '12345SSN1' with focus on 'ApplicationUnderTest.AO_LI_SSN'.", repo.ApplicationUnderTest.AO_LI_SSNInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.AO_LI_SSN.PressKeys("12345SSN1");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(3));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '02/04/1994' with focus on 'ApplicationUnderTest.AO_LI_DateOfBirth'.", repo.ApplicationUnderTest.AO_LI_DateOfBirthInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.AO_LI_DateOfBirth.PressKeys("02/04/1994");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(5));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'LICNO123' with focus on 'ApplicationUnderTest.AO_LI_LicenseNumber'.", repo.ApplicationUnderTest.AO_LI_LicenseNumberInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.AO_LI_LicenseNumber.PressKeys("LICNO123");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to 'KS' on item 'ApplicationUnderTest.AO_LI_LicenseState'.", repo.ApplicationUnderTest.AO_LI_LicenseStateInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.AO_LI_LicenseState.Element.SetAttributeValue("TagValue", "KS");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '05/06/2018' on item 'ApplicationUnderTest.AO_LI_RevocationDate'.", repo.ApplicationUnderTest.AO_LI_RevocationDateInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.AO_LI_RevocationDate.Element.SetAttributeValue("TagValue", "05/06/2018");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(9));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(10));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
