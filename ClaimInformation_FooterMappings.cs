///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ClaimInformation_FooterMappings recording.
    /// </summary>
    [TestModule("c21fdcf8-69a3-4d5e-a2f8-3275bbfc9448", ModuleType.Recording, 1)]
    public partial class ClaimInformation_FooterMappings : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static ClaimInformation_FooterMappings instance = new ClaimInformation_FooterMappings();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ClaimInformation_FooterMappings()
        {
            ClaimNumber = "";
            AccoutType = "";
            ClientName = "";
            ProjectName = "";
            ClaimTypes = "";
            DateOfLoss = "";
            Amount = "";
            StateOfLoss = "";
            Street = "";
            City = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ClaimInformation_FooterMappings Instance
        {
            get { return instance; }
        }

#region Variables

        string _ClaimNumber;

        /// <summary>
        /// Gets or sets the value of variable ClaimNumber.
        /// </summary>
        [TestVariable("5b4cf37e-3e34-4f1b-b4a2-730c941cdb7b")]
        public string ClaimNumber
        {
            get { return _ClaimNumber; }
            set { _ClaimNumber = value; }
        }

        string _AccoutType;

        /// <summary>
        /// Gets or sets the value of variable AccoutType.
        /// </summary>
        [TestVariable("8c0cc2a9-587f-4865-9ff9-ecb6b041b72f")]
        public string AccoutType
        {
            get { return _AccoutType; }
            set { _AccoutType = value; }
        }

        string _ClientName;

        /// <summary>
        /// Gets or sets the value of variable ClientName.
        /// </summary>
        [TestVariable("a3463092-20ef-40db-8d38-a2768a160a62")]
        public string ClientName
        {
            get { return _ClientName; }
            set { _ClientName = value; }
        }

        string _ProjectName;

        /// <summary>
        /// Gets or sets the value of variable ProjectName.
        /// </summary>
        [TestVariable("a63e8d40-21c7-4d82-8803-3befc9aa7af9")]
        public string ProjectName
        {
            get { return _ProjectName; }
            set { _ProjectName = value; }
        }

        string _ClaimTypes;

        /// <summary>
        /// Gets or sets the value of variable ClaimTypes.
        /// </summary>
        [TestVariable("39786e51-49bb-4d18-a960-fb323fea00c4")]
        public string ClaimTypes
        {
            get { return _ClaimTypes; }
            set { _ClaimTypes = value; }
        }

        string _DateOfLoss;

        /// <summary>
        /// Gets or sets the value of variable DateOfLoss.
        /// </summary>
        [TestVariable("c34a2fc5-2566-4b61-b6c9-0f0548823c30")]
        public string DateOfLoss
        {
            get { return _DateOfLoss; }
            set { _DateOfLoss = value; }
        }

        string _Amount;

        /// <summary>
        /// Gets or sets the value of variable Amount.
        /// </summary>
        [TestVariable("5f119b09-a1cb-40a4-b5d0-9d2828d39e98")]
        public string Amount
        {
            get { return _Amount; }
            set { _Amount = value; }
        }

        string _StateOfLoss;

        /// <summary>
        /// Gets or sets the value of variable StateOfLoss.
        /// </summary>
        [TestVariable("a0c42990-52d0-4ae0-a930-556850a3b028")]
        public string StateOfLoss
        {
            get { return _StateOfLoss; }
            set { _StateOfLoss = value; }
        }

        string _Street;

        /// <summary>
        /// Gets or sets the value of variable Street.
        /// </summary>
        [TestVariable("6bba1c34-815f-4796-bb2e-b479c8e31d44")]
        public string Street
        {
            get { return _Street; }
            set { _Street = value; }
        }

        string _City;

        /// <summary>
        /// Gets or sets the value of variable City.
        /// </summary>
        [TestVariable("ae30c90a-0111-4df8-a465-0857c6106f61")]
        public string City
        {
            get { return _City; }
            set { _City = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Footer_ClaimInfo' at Center.", repo.ApplicationUnderTest.Footer_ClaimInfoInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.Footer_ClaimInfo.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$AccoutType) on item 'ApplicationUnderTest.ClaimInfo_AccountType'.", repo.ApplicationUnderTest.ClaimInfo_AccountTypeInfo, new RecordItemIndex(1));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ClaimInfo_AccountTypeInfo, "InnerText", AccoutType);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$ClientName) on item 'ApplicationUnderTest.ClaimInfo_ClientName'.", repo.ApplicationUnderTest.ClaimInfo_ClientNameInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ClaimInfo_ClientNameInfo, "InnerText", ClientName);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$ClaimNumber) on item 'ApplicationUnderTest.ClaimInfo_ClaimNumber'.", repo.ApplicationUnderTest.ClaimInfo_ClaimNumberInfo, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ClaimInfo_ClaimNumberInfo, "InnerText", ClaimNumber);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$ProjectName) on item 'ApplicationUnderTest.ClaimInfo_Project'.", repo.ApplicationUnderTest.ClaimInfo_ProjectInfo, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ClaimInfo_ProjectInfo, "InnerText", ProjectName);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$ClaimTypes) on item 'ApplicationUnderTest.ClaimInfo_ClaimType'.", repo.ApplicationUnderTest.ClaimInfo_ClaimTypeInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ClaimInfo_ClaimTypeInfo, "InnerText", ClaimTypes);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='2/12/19') on item 'ApplicationUnderTest.ClaimInfo_DOL'.", repo.ApplicationUnderTest.ClaimInfo_DOLInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ClaimInfo_DOLInfo, "InnerText", "2/12/19");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=''$3,210.00'') on item 'ApplicationUnderTest.ClaimInfo_Amount'.", repo.ApplicationUnderTest.ClaimInfo_AmountInfo, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ClaimInfo_AmountInfo, "InnerText", "'$3,210.00'");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$StateOfLoss) on item 'ApplicationUnderTest.ClaimInfo_StateOfLoss'.", repo.ApplicationUnderTest.ClaimInfo_StateOfLossInfo, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ClaimInfo_StateOfLossInfo, "InnerText", StateOfLoss);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='$125.00') on item 'ApplicationUnderTest.ClaimInfo_Deductible'.", repo.ApplicationUnderTest.ClaimInfo_DeductibleInfo, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ClaimInfo_DeductibleInfo, "InnerText", "$125.00");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Street) on item 'ApplicationUnderTest.ClaimInfo_Street'.", repo.ApplicationUnderTest.ClaimInfo_StreetInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ClaimInfo_StreetInfo, "InnerText", Street);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$City) on item 'ApplicationUnderTest.ClaimInfo_City'.", repo.ApplicationUnderTest.ClaimInfo_CityInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ClaimInfo_CityInfo, "InnerText", City);
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(12));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
