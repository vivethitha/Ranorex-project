///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Adverse2_Driver_Personal_Information recording.
    /// </summary>
    [TestModule("78b8f55d-302f-4853-957c-9bdbff64e82a", ModuleType.Recording, 1)]
    public partial class Adverse2_Driver_Personal_Information : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static Adverse2_Driver_Personal_Information instance = new Adverse2_Driver_Personal_Information();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Adverse2_Driver_Personal_Information()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Adverse2_Driver_Personal_Information Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'ApplicationUnderTest.AD2_PI_FirstName'", repo.ApplicationUnderTest.AD2_PI_FirstNameInfo, new ActionTimeout(30000), new RecordItemIndex(0));
            repo.ApplicationUnderTest.AD2_PI_FirstNameInfo.WaitForExists(30000);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'AD2_PI_FirstName' with focus on 'ApplicationUnderTest.AD2_PI_FirstName'.", repo.ApplicationUnderTest.AD2_PI_FirstNameInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.AD2_PI_FirstName.PressKeys("AD2_PI_FirstName");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'AD2_PI_LastName' with focus on 'ApplicationUnderTest.AD2_PI_LastName'.", repo.ApplicationUnderTest.AD2_PI_LastNameInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.AD2_PI_LastName.PressKeys("AD2_PI_LastName");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'AD2_PI_Address1' with focus on 'ApplicationUnderTest.AD2_PI_Address1'.", repo.ApplicationUnderTest.AD2_PI_Address1Info, new RecordItemIndex(3));
            repo.ApplicationUnderTest.AD2_PI_Address1.PressKeys("AD2_PI_Address1");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'AD2_PI_Address2' with focus on 'ApplicationUnderTest.AD2_PI_Address2'.", repo.ApplicationUnderTest.AD2_PI_Address2Info, new RecordItemIndex(4));
            repo.ApplicationUnderTest.AD2_PI_Address2.PressKeys("AD2_PI_Address2");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'AD2_PI_City' with focus on 'ApplicationUnderTest.AD2_PI_City'.", repo.ApplicationUnderTest.AD2_PI_CityInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.AD2_PI_City.PressKeys("AD2_PI_City");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to 'AB' on item 'ApplicationUnderTest.AD2_PI_State'.", repo.ApplicationUnderTest.AD2_PI_StateInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.AD2_PI_State.Element.SetAttributeValue("TagValue", "AB");
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(7));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '90003' with focus on 'ApplicationUnderTest.AD2_PI_Zip'.", repo.ApplicationUnderTest.AD2_PI_ZipInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.AD2_PI_Zip.PressKeys("90003");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(9));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(10));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to 'Personal' on item 'ApplicationUnderTest.AD2_PI_UseType'.", repo.ApplicationUnderTest.AD2_PI_UseTypeInfo, new RecordItemIndex(11));
            repo.ApplicationUnderTest.AD2_PI_UseType.Element.SetAttributeValue("TagValue", "Personal");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to 'Land Line' on item 'ApplicationUnderTest.AD2_PI_PhoneType'.", repo.ApplicationUnderTest.AD2_PI_PhoneTypeInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.AD2_PI_PhoneType.Element.SetAttributeValue("TagValue", "Land Line");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to 'Direct' on item 'ApplicationUnderTest.AD2_PI_Source'.", repo.ApplicationUnderTest.AD2_PI_SourceInfo, new RecordItemIndex(13));
            repo.ApplicationUnderTest.AD2_PI_Source.Element.SetAttributeValue("TagValue", "Direct");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '9500095004' with focus on 'ApplicationUnderTest.AD2_PI_PhoneNumber'.", repo.ApplicationUnderTest.AD2_PI_PhoneNumberInfo, new RecordItemIndex(14));
            repo.ApplicationUnderTest.AD2_PI_PhoneNumber.PressKeys("9500095004");
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(15));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
