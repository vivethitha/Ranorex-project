///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Adverse1_Owner_Insurance_Information recording.
    /// </summary>
    [TestModule("31244cf1-3107-4624-8a29-0f7f1368c3bc", ModuleType.Recording, 1)]
    public partial class Adverse1_Owner_Insurance_Information : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static Adverse1_Owner_Insurance_Information instance = new Adverse1_Owner_Insurance_Information();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Adverse1_Owner_Insurance_Information()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Adverse1_Owner_Insurance_Information Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.InsuranceInformation1' at 92;15.", repo.ApplicationUnderTest.InsuranceInformation1Info, new RecordItemIndex(0));
            repo.ApplicationUnderTest.InsuranceInformation1.Click("92;15");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.AO_LI_RentalCompanyLiable' at Center.", repo.ApplicationUnderTest.AO_LI_RentalCompanyLiableInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.AO_LI_RentalCompanyLiable.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to 'DEWITT INSURANCE' on item 'ApplicationUnderTest.AO_LI_CompanyName'.", repo.ApplicationUnderTest.AO_LI_CompanyNameInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.AO_LI_CompanyName.Element.SetAttributeValue("TagValue", "DEWITT INSURANCE");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'AO_PolicyNumber_2' with focus on 'ApplicationUnderTest.AO_LI_PolicyNumber'.", repo.ApplicationUnderTest.AO_LI_PolicyNumberInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.AO_LI_PolicyNumber.PressKeys("AO_PolicyNumber_2");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(4));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(5));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'AO_ClaimNumber_2' with focus on 'ApplicationUnderTest.AO_LI_ClaimNumber'.", repo.ApplicationUnderTest.AO_LI_ClaimNumberInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.AO_LI_ClaimNumber.PressKeys("AO_ClaimNumber_2");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(7));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(8));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'AO_ContactName' with focus on 'ApplicationUnderTest.AO_LI_ContactName'.", repo.ApplicationUnderTest.AO_LI_ContactNameInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.AO_LI_ContactName.PressKeys("AO_ContactName");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to 'DC' on item 'ApplicationUnderTest.AO_LI_State'.", repo.ApplicationUnderTest.AO_LI_StateInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.AO_LI_State.Element.SetAttributeValue("TagValue", "DC");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'AO_LI_Address1' with focus on 'ApplicationUnderTest.AO_LI_Address1'.", repo.ApplicationUnderTest.AO_LI_Address1Info, new RecordItemIndex(11));
            repo.ApplicationUnderTest.AO_LI_Address1.PressKeys("AO_LI_Address1");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'AO_LI_Address2' with focus on 'ApplicationUnderTest.AO_LI_Address2'.", repo.ApplicationUnderTest.AO_LI_Address2Info, new RecordItemIndex(12));
            repo.ApplicationUnderTest.AO_LI_Address2.PressKeys("AO_LI_Address2");
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(13));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'AO_LI_City' with focus on 'ApplicationUnderTest.AO_LI_City'.", repo.ApplicationUnderTest.AO_LI_CityInfo, new RecordItemIndex(14));
            repo.ApplicationUnderTest.AO_LI_City.PressKeys("AO_LI_City");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '200020001' with focus on 'ApplicationUnderTest.AO_LI_Zip'.", repo.ApplicationUnderTest.AO_LI_ZipInfo, new RecordItemIndex(15));
            repo.ApplicationUnderTest.AO_LI_Zip.PressKeys("200020001");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(16));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(17));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to 'Personal' on item 'ApplicationUnderTest.AO_LI_PhoneUseType'.", repo.ApplicationUnderTest.AO_LI_PhoneUseTypeInfo, new RecordItemIndex(18));
            repo.ApplicationUnderTest.AO_LI_PhoneUseType.Element.SetAttributeValue("TagValue", "Personal");
            Delay.Milliseconds(1000);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to 'Cell' on item 'ApplicationUnderTest.AO_LI_PhoneType'.", repo.ApplicationUnderTest.AO_LI_PhoneTypeInfo, new RecordItemIndex(19));
            repo.ApplicationUnderTest.AO_LI_PhoneType.Element.SetAttributeValue("TagValue", "Cell");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to 'Caller ID' on item 'ApplicationUnderTest.AO_LI_PhoneSource'.", repo.ApplicationUnderTest.AO_LI_PhoneSourceInfo, new RecordItemIndex(20));
            repo.ApplicationUnderTest.AO_LI_PhoneSource.Element.SetAttributeValue("TagValue", "Caller ID");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '9500095005' with focus on 'ApplicationUnderTest.AO_LI_PhoneNumber'.", repo.ApplicationUnderTest.AO_LI_PhoneNumberInfo, new RecordItemIndex(21));
            repo.ApplicationUnderTest.AO_LI_PhoneNumber.PressKeys("9500095005");
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(22));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
